{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleRegularExpressionChange","event","a","setState","regularExpression","target","value","highlightedText","applyHighlights","state","targetText","highlight","handleTargetTextChange","text","replace","regexFromString","match","re","RegExp","e","handleScroll","node","ReactDOM","findDOMNode","asideElement","querySelector","mainElement","scrollTop","className","class","this","onChange","type","placeholder","onScroll","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,kKC2E5BC,G,8DApEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,8BAVmB,uCAUa,WAAOC,GAAP,eAAAC,EAAA,sEACxB,EAAKC,SAAS,CAAEC,kBAAmBH,EAAMI,OAAOC,QADxB,OAE1BC,EAAkB,EAAKC,gBAAgB,EAAKC,MAAMC,YACtD,EAAKP,SAAS,CAACQ,UAAWJ,IAHI,2CAVb,wDAgBnBK,uBAAyB,SAACX,GACxB,IAAIM,EAAkB,EAAKC,gBAAgBP,EAAMI,OAAOC,OACxD,EAAKH,SAAS,CAAEO,WAAYT,EAAMI,OAAOC,MAAOK,UAAWJ,KAlB1C,EAqBnBC,gBAAkB,SAACK,GACjB,OAAOA,EACJC,QAAQ,OAAQ,QAChBA,QAAQ,EAAKC,gBAAgB,EAAKN,MAAML,oBAAoB,SAAAY,GAAK,sBAAaA,EAAb,eAxBnD,EA2BnBD,gBAAkB,WAEhB,IAAIE,EACJ,IACEA,EAAK,IAAIC,OAAO,EAAKT,MAAML,kBAAmB,KAEhD,MAAMe,GACJF,EAAK,IAAIC,OAAO,GAAI,KAEtB,OAAOD,GApCU,EAuCnBG,aAAe,SAACnB,GACd,IAAMoB,EAAOC,IAASC,YAAT,gBACPC,EAAeH,EAAKI,cAAc,aAClCC,EAAcL,EAAKI,cAAc,cACvCD,EAAaG,UAAYD,EAAYC,WAzCrC,EAAKlB,MAAQ,CACXL,kBAAmB,GACnBM,WAAY,GACZC,UAAW,IALI,E,qDAgDjB,OACE,yBAAKiB,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKC,MAAM,QAAO,+CAClB,2BAAOvB,MAAOwB,KAAKrB,MAAML,kBAAmB2B,SAAUD,KAAK9B,8BAA+B4B,UAAU,2BAA2BI,KAAK,OAAOC,YAAY,mCAEzJ,yBAAKL,UAAU,mBACb,8BAAUA,UAAU,YAAYM,SAAUJ,KAAKV,aAAca,YAAY,mBAAmBF,SAAUD,KAAKlB,wBACxGkB,KAAKrB,MAAMC,YAEd,yBAAKkB,UAAU,YACb,yBAAKA,UAAU,aAAaO,wBAAyB,CAAEC,OAAQN,KAAKrB,MAAME,oB,GA5DpE0B,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCZNM,IAASqB,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a12f2690.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      regularExpression: \"\",\n      targetText: \"\",\n      highlight: \"\"\n\n    }\n  }\n\n  handleRegularExpressionChange = async (event) => {\n    await this.setState({ regularExpression: event.target.value });\n    let highlightedText = this.applyHighlights(this.state.targetText);\n    this.setState({highlight: highlightedText });\n  }\n\n  handleTargetTextChange = (event) => {\n    let highlightedText = this.applyHighlights(event.target.value);\n    this.setState({ targetText: event.target.value, highlight: highlightedText });\n  }\n\n  applyHighlights = (text) => {\n    return text\n      .replace(/\\n$/g, '\\n\\n')\n      .replace(this.regexFromString(this.state.regularExpression), match => `<mark>${match}</mark>`);\n  }\n\n  regexFromString = () => {\n\n    let re\n    try {\n      re = new RegExp(this.state.regularExpression, \"g\")\n    }\n    catch(e) {\n      re = new RegExp(\"\", \"g\")\n    }\n    return re\n  }\n\n  handleScroll = (event) => {\n    const node = ReactDOM.findDOMNode(this);\n    const asideElement = node.querySelector('.backdrop');\n    const mainElement = node.querySelector('.text-area');\n    asideElement.scrollTop = mainElement.scrollTop;\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"left-container\">\n          <div class=\"logo\"><b>neon regex tool</b></div>\n          <input value={this.state.regularExpression} onChange={this.handleRegularExpressionChange} className=\"regular-expression-input\" type=\"text\" placeholder=\"write regular expression here\" />\n        </div>\n        <div className=\"right-container\">\n          <textarea className=\"text-area\" onScroll={this.handleScroll} placeholder=\"insert text here\" onChange={this.handleTargetTextChange}>\n            {this.state.targetText}\n          </textarea>\n          <div className=\"backdrop\">\n            <div className=\"highlights\" dangerouslySetInnerHTML={{ __html: this.state.highlight }}>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}